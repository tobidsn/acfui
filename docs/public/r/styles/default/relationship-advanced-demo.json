{
  "name": "relationship-advanced-demo",
  "type": "registry:example",
  "dependencies": [
    "lucide-react"
  ],
  "registryDependencies": [
    "relationship",
    "badge",
    "button",
    "input",
    "select",
    "card",
    "switch",
    "label",
    "tabs"
  ],
  "files": [
    {
      "path": "examples/relationship-advanced-demo.tsx",
      "content": "\"use client\"\n\nimport { useState } from \"react\"\nimport { Relationship, type RelationshipItem } from \"@/registry/default/ui/relationship\"\nimport { Button } from \"@/components/ui/button\"\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { Badge } from \"@/components/ui/badge\"\nimport { Switch } from \"@/components/ui/switch\"\nimport { Label } from \"@/components/ui/label\"\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\"\n\nconst fullDataset: RelationshipItem[] = [\n  {\n    id: 1,\n    title: \"React Performance Optimization\",\n    type: \"post\",\n    status: \"publish\",\n    taxonomy: [\"React\", \"Performance\", \"JavaScript\"],\n    excerpt: \"Learn advanced techniques to optimize React applications for better performance and user experience...\",\n    date: \"2024-01-15\",\n    featured_image: \"https://picsum.photos/400/300?random=1\",\n    url: \"/posts/react-performance\",\n  },\n  {\n    id: 2,\n    title: \"TypeScript Best Practices\",\n    type: \"post\",\n    status: \"publish\",\n    taxonomy: [\"TypeScript\", \"Best Practices\", \"Development\"],\n    excerpt: \"Comprehensive guide to TypeScript best practices and coding patterns for enterprise applications...\",\n    date: \"2024-01-10\",\n    featured_image: \"https://picsum.photos/400/300?random=2\",\n    url: \"/posts/typescript-best-practices\",\n  },\n  {\n    id: 3,\n    title: \"CSS Grid Mastery\",\n    type: \"tutorial\",\n    status: \"publish\",\n    taxonomy: [\"CSS\", \"Grid\", \"Layout\"],\n    excerpt: \"Master CSS Grid layout with practical examples and real-world use cases...\",\n    date: \"2024-01-05\",\n    featured_image: \"https://picsum.photos/400/300?random=3\",\n    url: \"/tutorials/css-grid\",\n  },\n  {\n    id: 4,\n    title: \"Next.js 14 Features\",\n    type: \"guide\",\n    status: \"publish\",\n    taxonomy: [\"Next.js\", \"React\", \"Framework\"],\n    excerpt: \"Explore the latest features in Next.js 14 and how to use them in your projects...\",\n    date: \"2024-01-20\",\n    featured_image: \"https://picsum.photos/400/300?random=4\",\n    url: \"/guides/nextjs-14\",\n  },\n  {\n    id: 5,\n    title: \"Database Optimization\",\n    type: \"guide\",\n    status: \"draft\",\n    taxonomy: [\"Database\", \"Performance\", \"SQL\"],\n    excerpt: \"Optimize database queries and improve application performance with these proven techniques...\",\n    date: \"2024-01-12\",\n    featured_image: \"https://picsum.photos/400/300?random=5\",\n    url: \"/guides/database-optimization\",\n  },\n  {\n    id: 6,\n    title: \"Microservices Architecture\",\n    type: \"tutorial\",\n    status: \"publish\",\n    taxonomy: [\"Architecture\", \"Microservices\", \"Backend\"],\n    excerpt: \"Build scalable microservices architecture with Docker and Kubernetes...\",\n    date: \"2024-01-08\",\n    featured_image: \"https://picsum.photos/400/300?random=6\",\n    url: \"/tutorials/microservices\",\n  },\n  {\n    id: 7,\n    title: \"GraphQL API Design\",\n    type: \"post\",\n    status: \"publish\",\n    taxonomy: [\"GraphQL\", \"API\", \"Backend\"],\n    excerpt: \"Design efficient GraphQL APIs with proper schema design and resolver patterns...\",\n    date: \"2024-01-25\",\n    featured_image: \"https://picsum.photos/400/300?random=7\",\n    url: \"/posts/graphql-api\",\n  },\n  {\n    id: 8,\n    title: \"Testing Strategies\",\n    type: \"guide\",\n    status: \"publish\",\n    taxonomy: [\"Testing\", \"QA\", \"Development\"],\n    excerpt: \"Comprehensive testing strategies for modern web applications...\",\n    date: \"2024-01-18\",\n    featured_image: \"https://picsum.photos/400/300?random=8\",\n    url: \"/guides/testing-strategies\",\n  },\n  {\n    id: 9,\n    title: \"DevOps Fundamentals\",\n    type: \"tutorial\",\n    status: \"private\",\n    taxonomy: [\"DevOps\", \"CI/CD\", \"Infrastructure\"],\n    excerpt: \"Learn DevOps fundamentals including CI/CD pipelines and infrastructure as code...\",\n    date: \"2024-01-03\",\n    featured_image: \"https://picsum.photos/400/300?random=9\",\n    url: \"/tutorials/devops\",\n  },\n  {\n    id: 10,\n    title: \"Security Best Practices\",\n    type: \"guide\",\n    status: \"publish\",\n    taxonomy: [\"Security\", \"Web Security\", \"Best Practices\"],\n    excerpt: \"Essential security best practices for web applications and APIs...\",\n    date: \"2024-01-14\",\n    featured_image: \"https://picsum.photos/400/300?random=10\",\n    url: \"/guides/security\",\n  },\n]\n\nexport default function RelationshipAdvancedDemo() {\n  const [selectedItems, setSelectedItems] = useState<RelationshipItem[]>([])\n  const [returnFormat, setReturnFormat] = useState<\"object\" | \"id\">(\"object\")\n  const [showAllFeatures, setShowAllFeatures] = useState(false)\n  const [minItems, setMinItems] = useState(2)\n  const [maxItems, setMaxItems] = useState(5)\n  const [isRequired, setIsRequired] = useState(true)\n  const [error, setError] = useState<string>(\"\")\n\n  const handleChange = (items: RelationshipItem[] | string[] | number[]) => {\n    if (returnFormat === \"object\") {\n      setSelectedItems(items as RelationshipItem[])\n    } else {\n      // Convert IDs back to objects for display\n      const ids = items as (string | number)[]\n      const objects = fullDataset.filter(item => ids.includes(item.id))\n      setSelectedItems(objects)\n    }\n    \n    // Clear error when valid selection is made\n    if (isRequired && (items as any[]).length >= minItems) {\n      setError(\"\")\n    }\n  }\n\n  const handleValidate = () => {\n    if (isRequired && selectedItems.length < minItems) {\n      setError(`Minimum ${minItems} items required`)\n      return false\n    }\n    setError(\"\")\n    return true\n  }\n\n  const handleSave = () => {\n    if (handleValidate()) {\n      alert(`Saved ${selectedItems.length} items with return format: ${returnFormat}`)\n    }\n  }\n\n  return (\n    <div className=\"w-full max-w-6xl mx-auto space-y-6\">\n      <Card>\n        <CardHeader>\n          <CardTitle>Advanced Relationship Configuration</CardTitle>\n          <CardDescription>\n            Comprehensive example showcasing all relationship features\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <Tabs defaultValue=\"relationship\" className=\"w-full\">\n            <TabsList className=\"grid w-full grid-cols-3\">\n              <TabsTrigger value=\"relationship\">Relationship</TabsTrigger>\n              <TabsTrigger value=\"settings\">Settings</TabsTrigger>\n              <TabsTrigger value=\"output\">Output</TabsTrigger>\n            </TabsList>\n            \n            <TabsContent value=\"relationship\" className=\"space-y-4\">\n              <div className=\"flex items-center space-x-2 mb-4\">\n                <Switch\n                  id=\"all-features\"\n                  checked={showAllFeatures}\n                  onCheckedChange={setShowAllFeatures}\n                />\n                <Label htmlFor=\"all-features\">Show all display features</Label>\n              </div>\n\n              <Relationship\n                items={fullDataset}\n                selectedItems={selectedItems}\n                onChange={handleChange}\n                multiple={true}\n                min={minItems}\n                max={maxItems}\n                required={isRequired}\n                returnFormat={returnFormat}\n                postTypes={[\"post\", \"guide\", \"tutorial\"]}\n                postStatuses={[\"publish\", \"draft\", \"private\"]}\n                taxonomies={[\"React\", \"TypeScript\", \"CSS\", \"Next.js\", \"Database\", \"GraphQL\", \"Testing\", \"Security\"]}\n                showFilters={true}\n                showFeaturedImage={showAllFeatures}\n                showExcerpt={true}\n                showDate={showAllFeatures}\n                showPreview={showAllFeatures}\n                sortable={showAllFeatures}\n                instructions=\"Select content items for your collection. Use filters to narrow down results.\"\n                searchPlaceholder=\"Search by title, content, or tags...\"\n                error={error}\n                variant={error ? \"error\" : \"default\"}\n              />\n\n              <div className=\"flex gap-2\">\n                <Button onClick={handleSave}>\n                  Save Selection\n                </Button>\n                <Button \n                  variant=\"outline\" \n                  onClick={() => {\n                    setSelectedItems([])\n                    setError(\"\")\n                  }}\n                >\n                  Clear All\n                </Button>\n                <Button \n                  variant=\"outline\" \n                  onClick={handleValidate}\n                >\n                  Validate\n                </Button>\n              </div>\n            </TabsContent>\n\n            <TabsContent value=\"settings\" className=\"space-y-4\">\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <div className=\"space-y-4\">\n                  <div>\n                    <Label htmlFor=\"return-format\">Return Format</Label>\n                    <select\n                      id=\"return-format\"\n                      value={returnFormat}\n                      onChange={(e) => setReturnFormat(e.target.value as \"object\" | \"id\")}\n                      className=\"w-full mt-1 p-2 border rounded\"\n                    >\n                      <option value=\"object\">Object Array</option>\n                      <option value=\"id\">ID Array</option>\n                    </select>\n                  </div>\n\n                  <div>\n                    <Label htmlFor=\"min-items\">Minimum Items</Label>\n                    <input\n                      id=\"min-items\"\n                      type=\"number\"\n                      min=\"0\"\n                      max=\"10\"\n                      value={minItems}\n                      onChange={(e) => setMinItems(parseInt(e.target.value))}\n                      className=\"w-full mt-1 p-2 border rounded\"\n                    />\n                  </div>\n\n                  <div>\n                    <Label htmlFor=\"max-items\">Maximum Items</Label>\n                    <input\n                      id=\"max-items\"\n                      type=\"number\"\n                      min=\"1\"\n                      max=\"20\"\n                      value={maxItems}\n                      onChange={(e) => setMaxItems(parseInt(e.target.value))}\n                      className=\"w-full mt-1 p-2 border rounded\"\n                    />\n                  </div>\n                </div>\n\n                <div className=\"space-y-4\">\n                  <div className=\"flex items-center space-x-2\">\n                    <Switch\n                      id=\"required\"\n                      checked={isRequired}\n                      onCheckedChange={setIsRequired}\n                    />\n                    <Label htmlFor=\"required\">Required Field</Label>\n                  </div>\n\n                  <div className=\"flex items-center space-x-2\">\n                    <Switch\n                      id=\"features\"\n                      checked={showAllFeatures}\n                      onCheckedChange={setShowAllFeatures}\n                    />\n                    <Label htmlFor=\"features\">Enhanced Display</Label>\n                  </div>\n\n                  <div className=\"p-3 bg-muted/30 rounded\">\n                    <h4 className=\"font-medium text-sm mb-2\">Current Settings</h4>\n                    <div className=\"space-y-1 text-xs\">\n                      <div>Min: {minItems}, Max: {maxItems}</div>\n                      <div>Required: {isRequired ? 'Yes' : 'No'}</div>\n                      <div>Return: {returnFormat}</div>\n                      <div>Features: {showAllFeatures ? 'All' : 'Basic'}</div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </TabsContent>\n\n            <TabsContent value=\"output\" className=\"space-y-4\">\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <div>\n                  <h4 className=\"font-medium mb-2\">Selected Items ({selectedItems.length})</h4>\n                  <div className=\"space-y-2 max-h-80 overflow-y-auto\">\n                    {selectedItems.map((item) => (\n                      <div key={item.id} className=\"flex items-center gap-3 p-2 border rounded\">\n                        {showAllFeatures && item.featured_image && (\n                          <img\n                            src={item.featured_image}\n                            alt={item.title}\n                            className=\"w-10 h-10 rounded object-cover\"\n                          />\n                        )}\n                        <div className=\"flex-1\">\n                          <div className=\"font-medium text-sm\">{item.title}</div>\n                          <div className=\"flex items-center gap-2 mt-1\">\n                            <Badge variant=\"outline\" className=\"text-xs\">\n                              {item.type}\n                            </Badge>\n                            <Badge variant=\"secondary\" className=\"text-xs\">\n                              {item.status}\n                            </Badge>\n                          </div>\n                        </div>\n                      </div>\n                    ))}\n                    {selectedItems.length === 0 && (\n                      <p className=\"text-muted-foreground text-sm text-center py-8\">\n                        No items selected\n                      </p>\n                    )}\n                  </div>\n                </div>\n\n                <div>\n                  <h4 className=\"font-medium mb-2\">Raw Output</h4>\n                  <div className=\"bg-muted/30 p-3 rounded text-xs font-mono max-h-80 overflow-y-auto\">\n                    <pre>\n                      {JSON.stringify(\n                        returnFormat === \"object\" \n                          ? selectedItems.map(item => ({\n                              id: item.id,\n                              title: item.title,\n                              type: item.type,\n                              status: item.status\n                            }))\n                          : selectedItems.map(item => item.id),\n                        null,\n                        2\n                      )}\n                    </pre>\n                  </div>\n                </div>\n              </div>\n            </TabsContent>\n          </Tabs>\n        </CardContent>\n      </Card>\n    </div>\n  )\n} ",
      "type": "registry:example",
      "target": ""
    }
  ]
}