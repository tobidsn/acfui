{
  "name": "camera-permission-demo",
  "type": "registry:example",
  "dependencies": [
    "lucide-react"
  ],
  "registryDependencies": [
    "camera",
    "button",
    "card",
    "alert",
    "badge",
    "dialog"
  ],
  "files": [
    {
      "path": "examples/camera-permission-demo.tsx",
      "content": "\"use client\"\n\nimport { useState, useEffect } from \"react\"\nimport { Camera } from \"@/registry/default/ui/camera\"\nimport { Button } from \"@/components/ui/button\"\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { Alert, AlertDescription } from \"@/components/ui/alert\"\nimport { Badge } from \"@/components/ui/badge\"\nimport { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle } from \"@/components/ui/dialog\"\nimport { Shield, Camera as CameraIcon, Lock, Eye, CheckCircle, XCircle } from \"lucide-react\"\n\nexport default function CameraPermissionDemo() {\n  const [permissionStatus, setPermissionStatus] = useState<\"prompt\" | \"granted\" | \"denied\" | \"checking\">(\"checking\")\n  const [showPermissionModal, setShowPermissionModal] = useState(false)\n  const [showPrivacyInfo, setShowPrivacyInfo] = useState(false)\n  const [errorMessage, setErrorMessage] = useState<string | null>(null)\n  const [cameraStarted, setCameraStarted] = useState(false)\n\n  // Check existing camera permission on component mount\n  useEffect(() => {\n    checkCameraPermission()\n  }, [])\n\n  const checkCameraPermission = async () => {\n    try {\n      // Method 1: Try navigator.permissions API (more reliable)\n      if ('permissions' in navigator) {\n        try {\n          const result = await navigator.permissions.query({ name: 'camera' as PermissionName })\n          console.log('Camera permission via Permissions API:', result.state)\n          setPermissionStatus(result.state as \"prompt\" | \"granted\" | \"denied\")\n          return\n        } catch (permApiError) {\n          console.log('Permissions API failed, trying alternative method')\n        }\n      }\n\n      // Method 2: Try getUserMedia with very short timeout (Safari/Firefox fallback)\n      try {\n        const stream = await navigator.mediaDevices.getUserMedia({ \n          video: { width: 1, height: 1 }, \n          audio: false \n        })\n        \n        // If we get here, permission is already granted\n        stream.getTracks().forEach(track => track.stop()) // Clean up\n        setPermissionStatus(\"granted\")\n        console.log('Camera permission: granted (via getUserMedia test)')\n      } catch (testError: any) {\n        if (testError.name === 'NotAllowedError') {\n          setPermissionStatus(\"denied\")\n        } else {\n          setPermissionStatus(\"prompt\")\n        }\n        console.log('Camera permission: not granted yet')\n      }\n    } catch (error) {\n      console.log('Permission check failed:', error)\n      setPermissionStatus(\"prompt\")\n    }\n  }\n\n  const handleRequestCameraAccess = () => {\n    if (permissionStatus === \"granted\") {\n      // Already have permission, start camera directly\n      setCameraStarted(true)\n    } else {\n      // Show custom modal first\n      setShowPermissionModal(true)\n    }\n  }\n\n  const handlePermissionModalConfirm = () => {\n    setShowPermissionModal(false)\n    // Now trigger the actual camera start which will show native browser prompt\n    setCameraStarted(true)\n  }\n\n  const handleCameraStart = () => {\n    setPermissionStatus(\"granted\")\n    setErrorMessage(null)\n    console.log(\"Camera started successfully\")\n  }\n\n  const handleCameraError = (error: string) => {\n    setCameraStarted(false)\n    \n    if (error.includes(\"Permission denied\") || error.includes(\"NotAllowedError\")) {\n      setPermissionStatus(\"denied\")\n      setErrorMessage(\"Camera access denied. Please enable camera permissions in your browser settings.\")\n    } else if (error.includes(\"NotFoundError\")) {\n      setErrorMessage(\"No camera found. Please connect a camera device.\")\n    } else {\n      setErrorMessage(error)\n    }\n  }\n\n  const resetCamera = () => {\n    setCameraStarted(false)\n    setErrorMessage(null)\n    checkCameraPermission()\n  }\n\n  return (\n    <div className=\"w-full max-w-2xl mx-auto\">\n      <div className=\"min-h-[400px] max-h-[800px] overflow-y-auto scrollbar-thin scrollbar-thumb-gray-300 scrollbar-track-gray-100 dark:scrollbar-thumb-gray-600 dark:scrollbar-track-gray-800\">\n        <div className=\"space-y-6 p-1\">\n          {/* Permission Status Header */}\n          <div className=\"flex justify-center\">\n            <Badge \n              variant={\n                permissionStatus === \"granted\" ? \"default\" : \n                permissionStatus === \"denied\" ? \"destructive\" : \n                permissionStatus === \"checking\" ? \"secondary\" : \"outline\"\n              }\n              className=\"gap-2 px-3 py-1\"\n            >\n              {permissionStatus === \"granted\" && <CheckCircle className=\"size-4\" />}\n              {permissionStatus === \"denied\" && <XCircle className=\"size-4\" />}\n              {permissionStatus === \"checking\" && <Shield className=\"size-4 animate-pulse\" />}\n              {permissionStatus === \"prompt\" && <Shield className=\"size-4\" />}\n              \n              Camera: {\n                permissionStatus === \"granted\" ? \"Access Granted\" : \n                permissionStatus === \"denied\" ? \"Access Denied\" : \n                permissionStatus === \"checking\" ? \"Checking...\" : \"Permission Required\"\n              }\n            </Badge>\n          </div>\n\n          {/* Privacy Information Card */}\n          <Card className=\"border-blue-200 bg-blue-50/50 dark:border-blue-800 dark:bg-blue-950/20\">\n            <CardHeader className=\"pb-3\">\n              <div className=\"flex items-center gap-2\">\n                <Shield className=\"size-5 text-blue-600\" />\n                <CardTitle className=\"text-lg\">Privacy & Camera Access</CardTitle>\n              </div>\n              <CardDescription>\n                We respect your privacy. Camera access is used only for photo capture and is not recorded or stored.\n              </CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-3\">\n              <div className=\"flex flex-wrap gap-2\">\n                <Badge variant=\"secondary\" className=\"gap-1\">\n                  <Lock className=\"size-3\" />\n                  Local Processing\n                </Badge>\n                <Badge variant=\"secondary\" className=\"gap-1\">\n                  <Eye className=\"size-3\" />\n                  No Recording\n                </Badge>\n                <Badge variant=\"secondary\" className=\"gap-1\">\n                  <Shield className=\"size-3\" />\n                  Privacy First\n                </Badge>\n              </div>\n              <Button \n                variant=\"outline\" \n                size=\"sm\"\n                onClick={() => setShowPrivacyInfo(!showPrivacyInfo)}\n              >\n                {showPrivacyInfo ? \"Hide\" : \"Show\"} Privacy Details\n              </Button>\n              {showPrivacyInfo && (\n                <div className=\"text-sm text-muted-foreground space-y-2 mt-3 p-3 bg-background/50 rounded-lg max-h-32 overflow-y-auto\">\n                  <p><strong>What we access:</strong> Your device camera for live preview and photo capture</p>\n                  <p><strong>What we don't do:</strong> Record video, store images on servers, or share data</p>\n                  <p><strong>Your control:</strong> You can revoke permissions anytime in browser settings</p>\n                  <p><strong>Data handling:</strong> All processing happens locally on your device</p>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n\n          {/* Permission Denied Instructions */}\n          {permissionStatus === \"denied\" && (\n            <Alert className=\"border-red-200 bg-red-50 dark:border-red-800 dark:bg-red-950/20\">\n              <Shield className=\"size-4\" />\n              <AlertDescription className=\"space-y-2\">\n                <p><strong>Camera access denied</strong></p>\n                <p>To enable camera access, please:</p>\n                <ol className=\"list-decimal list-inside space-y-1 text-sm ml-4\">\n                  <li>Click the camera icon in your browser's address bar</li>\n                  <li>Select \"Allow\" for camera access</li>\n                  <li>Click \"Try Again\" below</li>\n                </ol>\n                <Button \n                  variant=\"outline\" \n                  size=\"sm\" \n                  onClick={resetCamera}\n                  className=\"mt-2\"\n                >\n                  Try Again\n                </Button>\n              </AlertDescription>\n            </Alert>\n          )}\n\n          {/* Error Messages */}\n          {errorMessage && (\n            <Alert className=\"border-amber-200 bg-amber-50 dark:border-amber-800 dark:bg-amber-950/20\">\n              <CameraIcon className=\"size-4\" />\n              <AlertDescription className=\"break-words\">{errorMessage}</AlertDescription>\n            </Alert>\n          )}\n\n          {/* Camera Component or Start Button */}\n          <div className=\"flex justify-center\">\n            {cameraStarted ? (\n              <div className=\"space-y-4 w-full max-w-md mx-auto\">\n                <div className=\"overflow-hidden rounded-lg flex justify-center\">\n                  <Camera\n                    onStart={handleCameraStart}\n                    onError={handleCameraError}\n                    onCapture={(imageData) => {\n                      console.log(\"Photo captured with privacy protection:\", imageData.slice(0, 50) + \"...\")\n                    }}\n                    autoStart={true}\n                  />\n                </div>\n                <div className=\"flex justify-center\">\n                  <Button \n                    variant=\"outline\" \n                    size=\"sm\" \n                    onClick={resetCamera}\n                  >\n                    Stop Camera\n                  </Button>\n                </div>\n              </div>\n            ) : (\n              <Button \n                onClick={handleRequestCameraAccess}\n                className=\"gap-2\"\n                disabled={permissionStatus === \"checking\"}\n              >\n                <CameraIcon className=\"size-4\" />\n                {permissionStatus === \"checking\" ? \"Checking Permissions...\" : \"Start Camera\"}\n              </Button>\n            )}\n          </div>\n        </div>\n      </div>\n\n      {/* Custom Permission Modal */}\n      <Dialog open={showPermissionModal} onOpenChange={setShowPermissionModal}>\n        <DialogContent className=\"sm:max-w-md max-h-[80vh] overflow-y-auto\">\n          <DialogHeader>\n            <DialogTitle className=\"flex items-center gap-2\">\n              <CameraIcon className=\"size-5\" />\n              Camera Permission Required\n            </DialogTitle>\n            <DialogDescription className=\"space-y-3\">\n              <p>\n                This application needs access to your camera to capture photos. \n                Your browser will ask for permission in the next step.\n              </p>\n              <div className=\"bg-muted p-3 rounded-lg space-y-2 max-h-40 overflow-y-auto\">\n                <p className=\"font-medium text-sm\">What happens next:</p>\n                <ol className=\"list-decimal list-inside text-sm space-y-1 ml-2\">\n                  <li>Click \"Allow Camera Access\" below</li>\n                  <li>Your browser will show a permission prompt</li>\n                  <li>Click \"Allow\" in the browser prompt</li>\n                  <li>Camera will start automatically</li>\n                </ol>\n              </div>\n              <div className=\"flex items-center gap-2 text-sm text-muted-foreground\">\n                <Shield className=\"size-4\" />\n                <span>Your privacy is protected - no data is stored or shared</span>\n              </div>\n            </DialogDescription>\n          </DialogHeader>\n          <DialogFooter className=\"gap-2\">\n            <Button \n              variant=\"outline\" \n              onClick={() => setShowPermissionModal(false)}\n            >\n              Cancel\n            </Button>\n            <Button \n              onClick={handlePermissionModalConfirm}\n              className=\"gap-2\"\n            >\n              <CameraIcon className=\"size-4\" />\n              Allow Camera Access\n            </Button>\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n    </div>\n  )\n} ",
      "type": "registry:example",
      "target": ""
    }
  ]
}