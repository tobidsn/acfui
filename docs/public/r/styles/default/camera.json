{
  "name": "camera",
  "type": "registry:ui",
  "dependencies": [
    "class-variance-authority",
    "lucide-react"
  ],
  "registryDependencies": [
    "button"
  ],
  "files": [
    {
      "path": "ui/camera.tsx",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport {\n  Camera as CameraIcon,\n  CameraOff,\n  Download,\n  RotateCcw,\n  Volume2,\n  VolumeX,\n  X,\n} from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\nconst cameraVariants = cva(\"relative overflow-hidden bg-black rounded-lg\", {\n  variants: {\n    size: {\n      sm: \"w-64 h-48\",\n      md: \"w-80 h-60\",\n      lg: \"w-96 h-72\",\n      xl: \"w-[28rem] h-80\",\n      full: \"w-full h-full\",\n    },\n    aspect: {\n      \"4:3\": \"aspect-[4/3]\",\n      \"16:9\": \"aspect-video\",\n      \"1:1\": \"aspect-square\",\n    },\n  },\n  defaultVariants: {\n    size: \"md\",\n    aspect: \"4:3\",\n  },\n})\n\nconst maskVariants = cva(\"absolute inset-0 pointer-events-none z-10\", {\n  variants: {\n    mask: {\n      none: \"\",\n      square:\n        \"bg-gradient-to-r from-black/60 via-transparent to-black/60 before:absolute before:inset-0 before:bg-gradient-to-b before:from-black/60 before:via-transparent before:to-black/60 after:absolute after:top-1/2 after:left-1/2 after:-translate-x-1/2 after:-translate-y-1/2 after:w-48 after:h-48 after:border-2 after:border-white/80 after:border-dashed after:rounded-lg\",\n      round:\n        \"bg-gradient-to-r from-black/60 via-transparent to-black/60 before:absolute before:inset-0 before:bg-gradient-to-b before:from-black/60 before:via-transparent before:to-black/60 after:absolute after:top-1/2 after:left-1/2 after:-translate-x-1/2 after:-translate-y-1/2 after:w-48 after:h-48 after:border-2 after:border-white/80 after:border-dashed after:rounded-full\",\n      card: \"bg-gradient-to-r from-black/60 via-transparent to-black/60 before:absolute before:inset-0 before:bg-gradient-to-b before:from-black/60 before:via-transparent before:to-black/60 after:absolute after:top-1/2 after:left-1/2 after:-translate-x-1/2 after:-translate-y-1/2 after:w-56 after:h-36 after:border-2 after:border-white/80 after:border-dashed after:rounded-2xl\",\n    },\n  },\n  defaultVariants: {\n    mask: \"none\",\n  },\n})\n\nexport interface CameraProps\n  extends Omit<React.HTMLAttributes<HTMLDivElement>, \"onError\">,\n    VariantProps<typeof cameraVariants> {\n  // Core callbacks\n  onCapture?: (imageData: string | File) => void\n  onError?: (error: string) => void\n  onStart?: () => void\n\n  // Behavior props\n  autoStart?: boolean\n  showControls?: boolean\n  allowDownload?: boolean\n  silent?: boolean\n\n  // Visual props\n  mirror?: boolean | \"preview\"\n  mask?: \"none\" | \"square\" | \"round\" | \"card\"\n\n  // Technical props\n  captureFormat?: \"image/jpeg\" | \"image/png\" | \"image/webp\"\n  captureQuality?: number\n  outputFormat?: \"base64\" | \"file\"\n}\n\nexport interface CameraRef {\n  startCamera: () => Promise<void>\n  stopCamera: () => void\n  toggleCamera: () => Promise<void>\n  capturePhoto: () => string | File | null\n  isActive: boolean\n  currentFacingMode: \"user\" | \"environment\"\n  isSilent: boolean\n}\n\nconst Camera = React.forwardRef<CameraRef, CameraProps>(\n  (\n    {\n      className,\n      size,\n      aspect,\n      onCapture,\n      onError,\n      onStart,\n      autoStart = true,\n      showControls = true,\n      allowDownload = true,\n      silent = false,\n      mirror = false,\n      mask = \"none\",\n      captureFormat = \"image/jpeg\",\n      captureQuality = 0.9,\n      outputFormat = \"base64\",\n      ...props\n    },\n    ref\n  ) => {\n    const videoRef = React.useRef<HTMLVideoElement>(null)\n    const canvasRef = React.useRef<HTMLCanvasElement>(null)\n    const streamRef = React.useRef<MediaStream | null>(null)\n\n    const [isActive, setIsActive] = React.useState(false)\n    const [isLoading, setIsLoading] = React.useState(false)\n    const [error, setError] = React.useState<string | null>(null)\n    const [facingMode, setFacingMode] = React.useState<\"user\" | \"environment\">(\n      \"environment\"\n    )\n    const [capturedImage, setCapturedImage] = React.useState<string | null>(\n      null\n    )\n    const [permissionState, setPermissionState] = React.useState<\n      \"granted\" | \"denied\" | \"prompt\"\n    >(\"prompt\")\n    const [isSilent, setIsSilent] = React.useState(silent)\n\n    const startCamera = React.useCallback(async () => {\n      setIsLoading(true)\n      setError(null)\n\n      try {\n        // Stop existing stream\n        if (streamRef.current) {\n          streamRef.current.getTracks().forEach((track) => track.stop())\n        }\n\n        const constraints: MediaStreamConstraints = {\n          video: {\n            facingMode: facingMode,\n            width: { ideal: 1280 },\n            height: { ideal: 720 },\n          },\n          audio: false,\n        }\n\n        const stream = await navigator.mediaDevices.getUserMedia(constraints)\n        streamRef.current = stream\n\n        if (videoRef.current) {\n          videoRef.current.srcObject = stream\n          \n          // Properly handle the play() Promise to avoid interruption errors\n          try {\n            const playPromise = videoRef.current.play()\n            if (playPromise !== undefined) {\n              await playPromise\n            }\n          } catch (playError) {\n            console.warn(\"Video play was interrupted:\", playError)\n            // Don't throw here as the stream is still valid\n          }\n        }\n\n        setIsActive(true)\n        setPermissionState(\"granted\")\n        onStart?.()\n      } catch (err) {\n        const errorMessage =\n          err instanceof Error ? err.message : \"Failed to access camera\"\n        setError(errorMessage)\n        setPermissionState(\"denied\")\n        onError?.(errorMessage)\n      } finally {\n        setIsLoading(false)\n      }\n    }, [facingMode, onError, onStart])\n\n    const stopCamera = React.useCallback(() => {\n      if (streamRef.current) {\n        streamRef.current.getTracks().forEach((track) => track.stop())\n        streamRef.current = null\n      }\n      \n      // Also pause the video element to prevent play() interruption\n      if (videoRef.current) {\n        videoRef.current.pause()\n        videoRef.current.srcObject = null\n      }\n      \n      setIsActive(false)\n    }, [])\n\n    const toggleCamera = React.useCallback(async () => {\n      const newFacingMode = facingMode === \"user\" ? \"environment\" : \"user\"\n      setFacingMode(newFacingMode)\n\n      if (isActive) {\n        // Properly stop current camera before starting new one\n        stopCamera()\n        // Small delay to ensure cleanup is complete\n        await new Promise(resolve => setTimeout(resolve, 100))\n        await startCamera()\n      }\n    }, [facingMode, isActive, startCamera, stopCamera])\n\n    const playShutterSound = React.useCallback(() => {\n      if (!isSilent) {\n        // Create a simple click sound\n        const audioContext = new (window.AudioContext ||\n          (window as any).webkitAudioContext)()\n        const oscillator = audioContext.createOscillator()\n        const gainNode = audioContext.createGain()\n\n        oscillator.connect(gainNode)\n        gainNode.connect(audioContext.destination)\n\n        oscillator.frequency.value = 800\n        gainNode.gain.setValueAtTime(0.3, audioContext.currentTime)\n        gainNode.gain.exponentialRampToValueAtTime(\n          0.01,\n          audioContext.currentTime + 0.1\n        )\n\n        oscillator.start(audioContext.currentTime)\n        oscillator.stop(audioContext.currentTime + 0.1)\n      }\n    }, [isSilent])\n\n    const capturePhoto = React.useCallback(() => {\n      if (!videoRef.current || !canvasRef.current || !isActive) {\n        return null\n      }\n\n      const video = videoRef.current\n      const canvas = canvasRef.current\n      const context = canvas.getContext(\"2d\")\n\n      if (!context) return null\n\n      canvas.width = video.videoWidth\n      canvas.height = video.videoHeight\n\n      // Handle mirroring\n      const shouldMirror =\n        mirror === true || (mirror === \"preview\" && facingMode === \"user\")\n      if (shouldMirror && mirror !== \"preview\") {\n        context.scale(-1, 1)\n        context.drawImage(video, -canvas.width, 0)\n        context.scale(-1, 1)\n      } else {\n        context.drawImage(video, 0, 0)\n      }\n\n      // Play shutter sound\n      playShutterSound()\n\n      let result: string | File\n\n      if (outputFormat === \"file\") {\n        // Convert canvas to blob and create File object\n        canvas.toBlob((blob) => {\n          if (blob) {\n            const file = new File([blob], `photo-${Date.now()}.${captureFormat.split(\"/\")[1]}`, {\n              type: captureFormat,\n            })\n            setCapturedImage(URL.createObjectURL(blob))\n            onCapture?.(file)\n          }\n        }, captureFormat, captureQuality)\n        return null // File creation is async\n      } else {\n        // Return base64 string\n        const imageData = canvas.toDataURL(captureFormat, captureQuality)\n        result = imageData\n        setCapturedImage(imageData)\n        onCapture?.(result)\n        return result\n      }\n    }, [\n      isActive,\n      onCapture,\n      captureFormat,\n      captureQuality,\n      mirror,\n      facingMode,\n      playShutterSound,\n      outputFormat,\n    ])\n\n    const downloadImage = React.useCallback(() => {\n      if (!capturedImage) return\n\n      const link = document.createElement(\"a\")\n      link.download = `photo-${Date.now()}.${captureFormat.split(\"/\")[1]}`\n      link.href = capturedImage\n      link.click()\n    }, [capturedImage, captureFormat])\n\n    const clearCapturedImage = React.useCallback(() => {\n      setCapturedImage(null)\n    }, [])\n\n    const toggleSilent = React.useCallback(() => {\n      setIsSilent((prev) => !prev)\n    }, [])\n\n    // Auto-start camera on mount\n    React.useEffect(() => {\n      if (autoStart) {\n        startCamera()\n      }\n\n      return () => {\n        // Ensure proper cleanup to prevent play() interruption errors\n        if (videoRef.current) {\n          videoRef.current.pause()\n          videoRef.current.srcObject = null\n        }\n        stopCamera()\n      }\n    }, [autoStart, startCamera, stopCamera])\n\n    // Expose methods via ref\n    React.useImperativeHandle(\n      ref,\n      () => ({\n        startCamera,\n        stopCamera,\n        toggleCamera,\n        capturePhoto,\n        isActive,\n        currentFacingMode: facingMode,\n        isSilent,\n      }),\n      [\n        startCamera,\n        stopCamera,\n        toggleCamera,\n        capturePhoto,\n        isActive,\n        facingMode,\n        isSilent,\n      ]\n    )\n\n    const getVideoStyle = () => {\n      const shouldMirror =\n        mirror === true || (mirror === \"preview\" && facingMode === \"user\")\n      return {\n        transform: shouldMirror ? \"scaleX(-1)\" : \"none\",\n      }\n    }\n\n    const renderContent = () => {\n      if (capturedImage) {\n        return (\n          <div className=\"relative h-full w-full\">\n            <img\n              src={capturedImage}\n              alt=\"Captured\"\n              className=\"h-full w-full object-cover\"\n            />\n            {showControls && (\n              <div className=\"absolute bottom-4 left-1/2 flex -translate-x-1/2 transform gap-2\">\n                {allowDownload && (\n                  <Button\n                    size=\"icon\"\n                    variant=\"secondary\"\n                    onClick={downloadImage}\n                    className=\"bg-black/80 text-white hover:bg-black/90\"\n                  >\n                    <Download className=\"size-4\" />\n                  </Button>\n                )}\n                <Button\n                  size=\"icon\"\n                  variant=\"secondary\"\n                  onClick={clearCapturedImage}\n                  className=\"bg-black/80 text-white hover:bg-black/90\"\n                >\n                  <X className=\"size-4\" />\n                </Button>\n              </div>\n            )}\n          </div>\n        )\n      }\n\n      if (error) {\n        return (\n          <div className=\"bg-muted text-muted-foreground flex h-full flex-col items-center justify-center\">\n            <CameraOff className=\"mb-4 size-12\" />\n            <p className=\"px-4 text-center text-sm\">{error}</p>\n            {permissionState === \"denied\" && (\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                className=\"mt-4\"\n                onClick={startCamera}\n              >\n                Try Again\n              </Button>\n            )}\n          </div>\n        )\n      }\n\n      if (isLoading) {\n        return (\n          <div className=\"bg-muted flex h-full items-center justify-center\">\n            <div className=\"flex flex-col items-center\">\n              <CameraIcon className=\"text-muted-foreground mb-2 size-12 animate-pulse\" />\n              <p className=\"text-muted-foreground text-sm\">\n                Starting camera...\n              </p>\n            </div>\n          </div>\n        )\n      }\n\n      if (!isActive) {\n        return (\n          <div className=\"bg-muted text-muted-foreground flex h-full flex-col items-center justify-center\">\n            <CameraIcon className=\"mb-4 size-12\" />\n            <p className=\"mb-4 text-sm\">Camera not active</p>\n            <Button onClick={startCamera} size=\"sm\">\n              Start Camera\n            </Button>\n          </div>\n        )\n      }\n\n      return null\n    }\n\n    return (\n      <div\n        className={cn(cameraVariants({ size, aspect, className }))}\n        {...props}\n      >\n        <video\n          ref={videoRef}\n          className={cn(\n            \"h-full w-full object-cover\",\n            (!isActive || error || capturedImage) && \"hidden\"\n          )}\n          style={getVideoStyle()}\n          muted\n          playsInline\n        />\n\n        <canvas ref={canvasRef} className=\"hidden\" />\n\n        {/* Mask overlay */}\n        {mask !== \"none\" && isActive && !error && !capturedImage && (\n          <div className={maskVariants({ mask })} />\n        )}\n\n        {renderContent()}\n\n        {showControls && isActive && !error && !capturedImage && (\n          <div className=\"absolute bottom-4 left-1/2 -translate-x-1/2 transform\">\n            <Button\n              size=\"icon\"\n              variant=\"default\"\n              onClick={capturePhoto}\n              className=\"size-12 bg-white text-black hover:bg-white/90\"\n              title=\"Capture Photo\"\n            >\n              <CameraIcon className=\"size-6\" />\n            </Button>\n          </div>\n        )}\n\n        {showControls && isActive && !error && !capturedImage && (\n          <div className=\"absolute top-4 right-4 flex gap-2\">\n            <Button\n              size=\"icon\"\n              variant=\"secondary\"\n              onClick={toggleCamera}\n              className=\"bg-black/80 text-white hover:bg-black/90\"\n              title=\"Toggle Camera\"\n            >\n              <RotateCcw className=\"size-4\" />\n            </Button>\n            <Button\n              size=\"icon\"\n              variant=\"secondary\"\n              onClick={toggleSilent}\n              className=\"bg-black/80 text-white hover:bg-black/90\"\n              title={isSilent ? \"Enable Sound\" : \"Disable Sound\"}\n            >\n              {isSilent ? (\n                <VolumeX className=\"size-4\" />\n              ) : (\n                <Volume2 className=\"size-4\" />\n              )}\n            </Button>\n            <Button\n              size=\"icon\"\n              variant=\"secondary\"\n              onClick={stopCamera}\n              className=\"bg-black/80 text-white hover:bg-black/90\"\n              title=\"Stop Camera\"\n            >\n              <CameraOff className=\"size-4\" />\n            </Button>\n          </div>\n        )}\n      </div>\n    )\n  }\n)\nCamera.displayName = \"Camera\"\n\nexport {\n  Camera,\n  cameraVariants,\n} ",
      "type": "registry:ui",
      "target": ""
    }
  ]
}