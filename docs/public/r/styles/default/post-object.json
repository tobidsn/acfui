{
  "name": "post-object",
  "type": "registry:ui",
  "dependencies": [
    "class-variance-authority",
    "lucide-react"
  ],
  "registryDependencies": [
    "badge",
    "button",
    "popover",
    "command",
    "select"
  ],
  "files": [
    {
      "path": "ui/post-object.tsx",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport {\n  Check,\n  ChevronDown,\n  Eye,\n  GripVertical,\n  X,\n} from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Badge } from \"@/components/ui/badge\"\nimport { Button } from \"@/components/ui/button\"\nimport {\n  Popover,\n  PopoverContent,\n  PopoverTrigger,\n} from \"@/components/ui/popover\"\nimport {\n  Command,\n  CommandEmpty,\n  CommandGroup,\n  CommandInput,\n  CommandItem,\n  CommandList,\n} from \"@/components/ui/command\"\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\"\n\nconst postObjectVariants = cva(\n  \"relative w-full rounded-md border border-input bg-background text-sm ring-offset-background placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n  {\n    variants: {\n      variant: {\n        default: \"border-input\",\n        error: \"border-destructive focus:ring-destructive\",\n      },\n      size: {\n        sm: \"h-9 px-3 py-2 text-xs\",\n        md: \"h-10 px-3 py-2 text-sm\",\n        lg: \"h-11 px-4 py-2 text-base\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"md\",\n    },\n  }\n)\n\nexport interface PostObjectItem {\n  id: string | number\n  title: string\n  type?: string\n  status?: \"publish\" | \"draft\" | \"private\"\n  taxonomy?: string[]\n  featured_image?: string\n  excerpt?: string\n  date?: string\n  url?: string\n}\n\nexport interface PostObjectFilter {\n  search?: string\n  post_type?: string[]\n  post_status?: string[]\n  taxonomy?: string[]\n}\n\nexport interface PostObjectProps\n  extends Omit<\n      React.HTMLAttributes<HTMLDivElement>,\n      \"onChange\" | \"onLoad\" | \"onSelect\" | \"onRemove\"\n    >,\n    VariantProps<typeof postObjectVariants> {\n  // Data props\n  items?: PostObjectItem[]\n  selectedItems?: PostObjectItem[]\n\n  // Configuration\n  multiple?: boolean\n  allowNull?: boolean\n  required?: boolean\n\n  // Async data loading\n  onLoad?: (filter: PostObjectFilter) => Promise<PostObjectItem[]>\n  loading?: boolean\n\n  // Filtering options\n  postTypes?: string[]\n  postStatuses?: string[]\n  taxonomies?: string[]\n  showFilters?: boolean | string[]\n\n  // Display options\n  showPreview?: boolean\n  showFeaturedImage?: boolean\n  showExcerpt?: boolean\n  showDate?: boolean\n  sortable?: boolean\n\n  // Return format\n  returnFormat?: \"object\" | \"id\"\n\n  // Event handlers\n  onChange?: (items: PostObjectItem[] | string[] | number[] | null) => void\n  onSelect?: (item: PostObjectItem) => void\n  onRemove?: (item: PostObjectItem) => void\n\n  // Labels and messages\n  placeholder?: string\n  searchPlaceholder?: string\n  noItemsText?: string\n  loadingText?: string\n  instructions?: string\n\n  // Validation\n  error?: string\n}\n\nconst PostObject = React.forwardRef<HTMLDivElement, PostObjectProps>(\n  (\n    {\n      className,\n      variant,\n      size,\n      items = [],\n      selectedItems = [],\n      multiple = false,\n      allowNull = true,\n      required = false,\n      onLoad,\n      loading = false,\n      postTypes = [],\n      postStatuses = [],\n      taxonomies = [],\n      showFilters = false,\n      showPreview = false,\n      showFeaturedImage = false,\n      showExcerpt = false,\n      showDate = false,\n      sortable = false,\n      returnFormat = \"object\",\n      onChange,\n      onSelect,\n      onRemove,\n      placeholder = \"Select post...\",\n      searchPlaceholder = \"Search posts...\",\n      noItemsText = \"No posts found\",\n      loadingText = \"Loading...\",\n      instructions,\n      error,\n      ...props\n    },\n    ref\n  ) => {\n    const [open, setOpen] = React.useState(false)\n    const [searchQuery, setSearchQuery] = React.useState(\"\")\n    const [selectedPostType, setSelectedPostType] = React.useState<string>(\"all\")\n    const [selectedPostStatus, setSelectedPostStatus] = React.useState<string>(\"all\")\n    const [selectedTaxonomy, setSelectedTaxonomy] = React.useState<string>(\"all\")\n    const [availableItems, setAvailableItems] = React.useState<PostObjectItem[]>(items)\n    const [internalSelected, setInternalSelected] = React.useState<PostObjectItem[]>(selectedItems || [])\n    const [isLoading, setIsLoading] = React.useState(loading)\n\n    // Debounced search\n    React.useEffect(() => {\n      const timeoutId = setTimeout(() => {\n        if (onLoad) {\n          setIsLoading(true)\n          const filter: PostObjectFilter = {\n            search: searchQuery || undefined,\n            post_type: selectedPostType === \"all\" ? postTypes : [selectedPostType],\n            post_status: selectedPostStatus === \"all\" ? postStatuses : [selectedPostStatus],\n            taxonomy: selectedTaxonomy === \"all\" ? undefined : [selectedTaxonomy],\n          }\n\n          onLoad(filter)\n            .then((loadedItems) => {\n              setAvailableItems(loadedItems || [])\n              setIsLoading(false)\n            })\n            .catch(() => {\n              setAvailableItems([])\n              setIsLoading(false)\n            })\n        }\n      }, 300)\n\n      return () => clearTimeout(timeoutId)\n    }, [searchQuery, selectedPostType, selectedPostStatus, selectedTaxonomy, onLoad, postTypes, postStatuses])\n\n    // Update internal state when selectedItems prop changes\n    React.useEffect(() => {\n      setInternalSelected(selectedItems || [])\n    }, [selectedItems])\n\n    // Update available items when items prop changes\n    React.useEffect(() => {\n      if (!onLoad) {\n        setAvailableItems(items || [])\n      }\n    }, [items, onLoad])\n\n    const handleSelectItem = React.useCallback(\n      (item: PostObjectItem) => {\n        let newSelected: PostObjectItem[]\n\n        if (multiple) {\n          if (internalSelected.some((selected) => selected.id === item.id)) {\n            // Remove if already selected\n            newSelected = internalSelected.filter((selected) => selected.id !== item.id)\n          } else {\n            // Add to selection\n            newSelected = [...internalSelected, item]\n          }\n        } else {\n          // Single selection - replace current selection\n          newSelected = [item]\n          setOpen(false)\n        }\n\n        setInternalSelected(newSelected)\n        onSelect?.(item)\n\n        if (onChange) {\n          const result = returnFormat === \"object\" \n            ? newSelected \n            : newSelected.map((item) => item.id) as string[] | number[]\n          onChange(result)\n        }\n      },\n      [internalSelected, multiple, returnFormat, onChange, onSelect]\n    )\n\n    const handleRemoveItem = React.useCallback(\n      (item: PostObjectItem) => {\n        const newSelected = internalSelected.filter(\n          (selected) => selected.id !== item.id\n        )\n        setInternalSelected(newSelected)\n\n        onRemove?.(item)\n\n        if (onChange) {\n          const result = returnFormat === \"object\" \n            ? newSelected \n            : newSelected.map((item) => item.id) as string[] | number[]\n          onChange(result)\n        }\n      },\n      [internalSelected, returnFormat, onChange, onRemove]\n    )\n\n    const handleClearAll = React.useCallback(() => {\n      setInternalSelected([])\n      if (onChange) {\n        onChange(returnFormat === \"object\" ? [] : [])\n      }\n    }, [onChange, returnFormat])\n\n    const getFilteredItems = React.useCallback(() => {\n      if (onLoad) return availableItems.filter(item => item && item.id !== undefined)\n\n      return availableItems.filter((item) => {\n        if (!item || item.id === undefined) return false\n        \n        const matchesSearch = !searchQuery || \n          item.title?.toLowerCase().includes(searchQuery.toLowerCase())\n\n        const matchesPostType = selectedPostType === \"all\" || \n          !selectedPostType || item.type === selectedPostType\n\n        const matchesPostStatus = selectedPostStatus === \"all\" || \n          !selectedPostStatus || item.status === selectedPostStatus\n\n        const matchesTaxonomy = selectedTaxonomy === \"all\" || \n          !selectedTaxonomy || item.taxonomy?.includes(selectedTaxonomy)\n\n        return matchesSearch && matchesPostType && matchesPostStatus && matchesTaxonomy\n      })\n    }, [availableItems, searchQuery, selectedPostType, selectedPostStatus, selectedTaxonomy, onLoad])\n\n    const filteredItems = getFilteredItems()\n    const isFiltersVisible = showFilters === true || (Array.isArray(showFilters) && showFilters.length > 0)\n\n    const shouldShowSearch = showFilters === true || (Array.isArray(showFilters) && showFilters.includes(\"search\"))\n    const shouldShowPostType = showFilters === true || (Array.isArray(showFilters) && showFilters.includes(\"post_type\"))\n    const shouldShowPostStatus = showFilters === true || (Array.isArray(showFilters) && showFilters.includes(\"post_status\"))\n    const shouldShowTaxonomy = showFilters === true || (Array.isArray(showFilters) && showFilters.includes(\"taxonomy\"))\n\n    const getDisplayText = () => {\n      if (internalSelected.length === 0) return placeholder\n      if (internalSelected.length === 1) return internalSelected[0]?.title || placeholder\n      return `${internalSelected.length} posts selected`\n    }\n\n    return (\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props}>\n        {/* Instructions */}\n        {instructions && (\n          <p className=\"text-sm text-muted-foreground\">{instructions}</p>\n        )}\n\n        {/* Filters */}\n        {isFiltersVisible && postTypes.length > 0 && (\n          <div className=\"space-y-3 p-3 border rounded-md bg-muted/30\">\n            <div className=\"flex flex-col gap-3 sm:flex-row\">\n              {shouldShowPostType && postTypes.length > 0 && (\n                <Select value={selectedPostType} onValueChange={setSelectedPostType}>\n                  <SelectTrigger className=\"w-full sm:w-[140px]\">\n                    <SelectValue placeholder=\"Post type\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"all\">All types</SelectItem>\n                    {postTypes.map((type) => (\n                      <SelectItem key={type} value={type}>\n                        {type}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              )}\n\n              {shouldShowPostStatus && postStatuses.length > 0 && (\n                <Select value={selectedPostStatus} onValueChange={setSelectedPostStatus}>\n                  <SelectTrigger className=\"w-full sm:w-[140px]\">\n                    <SelectValue placeholder=\"Status\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"all\">All statuses</SelectItem>\n                    {postStatuses.map((status) => (\n                      <SelectItem key={status} value={status}>\n                        {status}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              )}\n\n              {shouldShowTaxonomy && taxonomies.length > 0 && (\n                <Select value={selectedTaxonomy} onValueChange={setSelectedTaxonomy}>\n                  <SelectTrigger className=\"w-full sm:w-[140px]\">\n                    <SelectValue placeholder=\"Category\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"all\">All categories</SelectItem>\n                    {taxonomies.map((taxonomy) => (\n                      <SelectItem key={taxonomy} value={taxonomy}>\n                        {taxonomy}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              )}\n            </div>\n          </div>\n        )}\n\n        {/* Main Selection Interface */}\n        <Popover open={open} onOpenChange={setOpen}>\n          <PopoverTrigger asChild>\n            <Button\n              variant=\"outline\"\n              role=\"combobox\"\n              aria-expanded={open}\n              className={cn(\n                postObjectVariants({ variant, size }),\n                \"justify-between font-normal\",\n                internalSelected.length === 0 && \"text-muted-foreground\"\n              )}\n            >\n              <span className=\"truncate\">{getDisplayText()}</span>\n              <ChevronDown className=\"ml-2 h-4 w-4 shrink-0 opacity-50\" />\n            </Button>\n          </PopoverTrigger>\n          <PopoverContent className=\"w-[400px] p-0\" align=\"start\">\n            <Command>\n              {shouldShowSearch && (\n                <CommandInput\n                  placeholder={searchPlaceholder}\n                  value={searchQuery}\n                  onValueChange={setSearchQuery}\n                />\n              )}\n              <CommandList>\n                <CommandEmpty>\n                  {isLoading ? loadingText : noItemsText}\n                </CommandEmpty>\n                {allowNull && internalSelected.length > 0 && (\n                  <CommandGroup>\n                    <CommandItem onSelect={handleClearAll} className=\"text-muted-foreground\">\n                      <X className=\"mr-2 h-4 w-4\" />\n                      Clear selection{multiple && \"s\"}\n                    </CommandItem>\n                  </CommandGroup>\n                )}\n                <CommandGroup>\n                  {filteredItems\n                    .filter((item): item is PostObjectItem => item != null && item.id !== undefined)\n                    .map((item) => {\n                      const isSelected = internalSelected.some((selected) => selected.id === item.id)\n                      \n                      return (\n                        <CommandItem\n                          key={item.id}\n                          onSelect={() => handleSelectItem(item)}\n                          className=\"flex items-center gap-3 p-3\"\n                        >\n                          <div className=\"flex h-4 w-4 items-center justify-center\">\n                            {isSelected && <Check className=\"h-4 w-4\" />}\n                          </div>\n                          \n                          {showFeaturedImage && item.featured_image && (\n                            <img\n                              src={item.featured_image}\n                              alt={item.title}\n                              className=\"h-8 w-8 rounded object-cover\"\n                            />\n                          )}\n                          \n                          <div className=\"flex-1 min-w-0\">\n                            <div className=\"flex items-center gap-2\">\n                              <span className=\"font-medium truncate\">{item.title}</span>\n                              {item.status && item.status !== \"publish\" && (\n                                <Badge variant=\"secondary\" className=\"text-xs\">\n                                  {item.status}\n                                </Badge>\n                              )}\n                              {item.type && (\n                                <Badge variant=\"outline\" className=\"text-xs\">\n                                  {item.type}\n                                </Badge>\n                              )}\n                            </div>\n                            \n                            {showExcerpt && item.excerpt && (\n                              <p className=\"text-xs text-muted-foreground mt-1 line-clamp-2\">\n                                {item.excerpt}\n                              </p>\n                            )}\n                            \n                            {showDate && item.date && (\n                              <span className=\"text-xs text-muted-foreground\">\n                                {item.date}\n                              </span>\n                            )}\n                          </div>\n                          \n                          {showPreview && item.url && (\n                            <Button\n                              variant=\"ghost\"\n                              size=\"sm\"\n                              className=\"h-8 w-8 p-0\"\n                              asChild\n                              onClick={(e) => e.stopPropagation()}\n                            >\n                              <a href={item.url} target=\"_blank\" rel=\"noopener noreferrer\">\n                                <Eye className=\"h-4 w-4\" />\n                              </a>\n                            </Button>\n                          )}\n                        </CommandItem>\n                      )\n                    })}\n                </CommandGroup>\n              </CommandList>\n            </Command>\n          </PopoverContent>\n        </Popover>\n\n        {/* Selected Items (for multiple selection) */}\n        {multiple && internalSelected.length > 0 && (\n          <div className=\"space-y-2 p-3 border rounded-md bg-muted/30\">\n            <h4 className=\"text-sm font-medium\">Selected Posts</h4>\n            <div className=\"space-y-1\">\n              {internalSelected.map((item, index) => (\n                <div\n                  key={item.id}\n                  className=\"flex items-center gap-2 p-2 bg-background rounded border\"\n                >\n                  {sortable && (\n                    <GripVertical className=\"h-4 w-4 text-muted-foreground cursor-move\" />\n                  )}\n                  \n                  {showFeaturedImage && item.featured_image && (\n                    <img\n                      src={item.featured_image}\n                      alt={item.title}\n                      className=\"h-6 w-6 rounded object-cover\"\n                    />\n                  )}\n                  \n                  <div className=\"flex-1 min-w-0\">\n                    <span className=\"text-sm font-medium truncate\">{item.title}</span>\n                    {item.type && (\n                      <Badge variant=\"outline\" className=\"ml-2 text-xs\">\n                        {item.type}\n                      </Badge>\n                    )}\n                  </div>\n                  \n                  <Button\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    className=\"h-6 w-6 p-0\"\n                    onClick={() => handleRemoveItem(item)}\n                  >\n                    <X className=\"h-3 w-3\" />\n                  </Button>\n                </div>\n              ))}\n            </div>\n          </div>\n        )}\n\n        {/* Error Message */}\n        {error && (\n          <p className=\"text-sm text-destructive\">{error}</p>\n        )}\n      </div>\n    )\n  }\n)\nPostObject.displayName = \"PostObject\"\n\nexport { PostObject, postObjectVariants } ",
      "type": "registry:ui",
      "target": ""
    }
  ]
}