{
  "name": "relationship",
  "type": "registry:ui",
  "dependencies": [
    "class-variance-authority",
    "lucide-react"
  ],
  "registryDependencies": [
    "badge",
    "button",
    "input",
    "select",
    "card"
  ],
  "files": [
    {
      "path": "ui/relationship.tsx",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport {\n  Calendar,\n  Eye,\n  FileText,\n  GripVertical,\n  Plus,\n  Search,\n  X,\n} from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Badge } from \"@/components/ui/badge\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\"\nimport {\n  Card,\n  CardContent,\n  CardHeader,\n  CardTitle,\n} from \"@/components/ui/card\"\n\nconst relationshipVariants = cva(\"border rounded-lg bg-background\", {\n  variants: {\n    variant: {\n      default: \"border-border\",\n      error: \"border-destructive\",\n    },\n    size: {\n      sm: \"text-sm\",\n      md: \"text-base\",\n      lg: \"text-lg\",\n    },\n  },\n  defaultVariants: {\n    variant: \"default\",\n    size: \"md\",\n  },\n})\n\nexport interface RelationshipItem {\n  id: string | number\n  title: string\n  type?: string\n  status?: \"publish\" | \"draft\" | \"private\"\n  taxonomy?: string[]\n  featured_image?: string\n  excerpt?: string\n  date?: string\n  url?: string\n}\n\nexport interface RelationshipFilter {\n  search?: string\n  post_type?: string[]\n  post_status?: string[]\n  taxonomy?: string[]\n}\n\nexport interface RelationshipProps\n  extends Omit<\n      React.HTMLAttributes<HTMLDivElement>,\n      \"onChange\" | \"onLoad\" | \"onSelect\" | \"onRemove\"\n    >,\n    VariantProps<typeof relationshipVariants> {\n  // Data props\n  items?: RelationshipItem[]\n  selectedItems?: RelationshipItem[]\n\n  // Configuration\n  multiple?: boolean\n  min?: number\n  max?: number\n  required?: boolean\n\n  // Async data loading\n  onLoad?: (filter: RelationshipFilter) => Promise<RelationshipItem[]>\n  loading?: boolean\n\n  // Filtering options\n  postTypes?: string[]\n  postStatuses?: string[]\n  taxonomies?: string[]\n  showFilters?: boolean | string[] // true/false or ['search', 'post_type', 'taxonomy']\n\n  // Display options\n  showPreview?: boolean\n  showFeaturedImage?: boolean\n  showExcerpt?: boolean\n  showDate?: boolean\n  sortable?: boolean\n\n  // Return format\n  returnFormat?: \"object\" | \"id\"\n\n  // Event handlers\n  onChange?: (items: RelationshipItem[] | string[] | number[]) => void\n  onSelect?: (item: RelationshipItem) => void\n  onRemove?: (item: RelationshipItem) => void\n\n  // Labels and messages\n  searchPlaceholder?: string\n  noItemsText?: string\n  noSelectedText?: string\n  loadingText?: string\n  instructions?: string\n\n  // Validation\n  error?: string\n}\n\nconst Relationship = React.forwardRef<HTMLDivElement, RelationshipProps>(\n  (\n    {\n      className,\n      variant,\n      size,\n      items = [],\n      selectedItems = [],\n      multiple = true,\n      min = 0,\n      max = 10,\n      required = false,\n      onLoad,\n      loading = false,\n      postTypes = [],\n      postStatuses = [],\n      taxonomies = [],\n      showFilters = true,\n      showPreview = false,\n      showFeaturedImage = false,\n      showExcerpt = false,\n      showDate = false,\n      sortable = false,\n      returnFormat = \"object\",\n      onChange,\n      onSelect,\n      onRemove,\n      searchPlaceholder = \"Search...\",\n      noItemsText = \"No items found\",\n      noSelectedText = \"No items selected\",\n      loadingText = \"Loading...\",\n      instructions,\n      error,\n      ...props\n    },\n    ref\n  ) => {\n    const [searchQuery, setSearchQuery] = React.useState(\"\")\n    const [selectedPostType, setSelectedPostType] = React.useState<string>(\"all\")\n    const [selectedPostStatus, setSelectedPostStatus] = React.useState<string>(\"all\")\n    const [selectedTaxonomy, setSelectedTaxonomy] = React.useState<string>(\"all\")\n    const [availableItems, setAvailableItems] = React.useState<RelationshipItem[]>(items)\n    const [internalSelected, setInternalSelected] = React.useState<RelationshipItem[]>(selectedItems)\n    const [isLoading, setIsLoading] = React.useState(loading)\n\n    // Debounced search\n    React.useEffect(() => {\n      const timeoutId = setTimeout(() => {\n        if (onLoad) {\n          setIsLoading(true)\n          const filter: RelationshipFilter = {\n            search: searchQuery || undefined,\n            post_type: selectedPostType === \"all\" ? postTypes : [selectedPostType],\n            post_status: selectedPostStatus === \"all\" ? postStatuses : [selectedPostStatus],\n            taxonomy: selectedTaxonomy === \"all\" ? undefined : [selectedTaxonomy],\n          }\n\n          onLoad(filter)\n            .then((loadedItems) => {\n              setAvailableItems(loadedItems || [])\n              setIsLoading(false)\n            })\n            .catch(() => {\n              setAvailableItems([])\n              setIsLoading(false)\n            })\n        }\n      }, 300)\n\n      return () => clearTimeout(timeoutId)\n    }, [searchQuery, selectedPostType, selectedPostStatus, selectedTaxonomy, onLoad, postTypes, postStatuses])\n\n    // Update internal state when selectedItems prop changes\n    React.useEffect(() => {\n      setInternalSelected(selectedItems || [])\n    }, [selectedItems])\n\n    // Update available items when items prop changes\n    React.useEffect(() => {\n      if (!onLoad) {\n        setAvailableItems(items || [])\n      }\n    }, [items, onLoad])\n\n    const handleSelectItem = React.useCallback(\n      (item: RelationshipItem) => {\n        if (!multiple && internalSelected.length >= 1) return\n        if (internalSelected.some((selected) => selected.id === item.id)) return\n        if (internalSelected.length >= max) return\n\n        const newSelected = multiple ? [...internalSelected, item] : [item]\n        setInternalSelected(newSelected)\n\n        onSelect?.(item)\n\n        if (onChange) {\n          const result = returnFormat === \"object\" \n            ? newSelected \n            : newSelected.map((item) => item.id) as string[] | number[]\n          onChange(result)\n        }\n      },\n      [internalSelected, multiple, max, returnFormat, onChange, onSelect]\n    )\n\n    const handleRemoveItem = React.useCallback(\n      (item: RelationshipItem) => {\n        const newSelected = internalSelected.filter(\n          (selected) => selected.id !== item.id\n        )\n        setInternalSelected(newSelected)\n\n        onRemove?.(item)\n\n        if (onChange) {\n          const result = returnFormat === \"object\" \n            ? newSelected \n            : newSelected.map((item) => item.id) as string[] | number[]\n          onChange(result)\n        }\n      },\n      [internalSelected, returnFormat, onChange, onRemove]\n    )\n\n    const getFilteredItems = React.useCallback(() => {\n      if (onLoad) return availableItems.filter(item => item && item.id !== undefined)\n\n      return availableItems.filter((item) => {\n        if (!item || item.id === undefined) return false\n        \n        const matchesSearch = !searchQuery || \n          item.title?.toLowerCase().includes(searchQuery.toLowerCase())\n\n        const matchesPostType = selectedPostType === \"all\" || \n          !selectedPostType || item.type === selectedPostType\n\n        const matchesPostStatus = selectedPostStatus === \"all\" || \n          !selectedPostStatus || item.status === selectedPostStatus\n\n        const matchesTaxonomy = selectedTaxonomy === \"all\" || \n          !selectedTaxonomy || item.taxonomy?.includes(selectedTaxonomy)\n\n        return matchesSearch && matchesPostType && matchesPostStatus && matchesTaxonomy\n      })\n    }, [availableItems, searchQuery, selectedPostType, selectedPostStatus, selectedTaxonomy, onLoad])\n\n    const filteredItems = getFilteredItems()\n    const isFiltersVisible = showFilters === true || (Array.isArray(showFilters) && showFilters.length > 0)\n\n    const shouldShowSearch = showFilters === true || (Array.isArray(showFilters) && showFilters.includes(\"search\"))\n    const shouldShowPostType = showFilters === true || (Array.isArray(showFilters) && showFilters.includes(\"post_type\"))\n    const shouldShowPostStatus = showFilters === true || (Array.isArray(showFilters) && showFilters.includes(\"post_status\"))\n    const shouldShowTaxonomy = showFilters === true || (Array.isArray(showFilters) && showFilters.includes(\"taxonomy\"))\n\n    return (\n      <div\n        ref={ref}\n        className={cn(relationshipVariants({ variant, size, className }))}\n        {...props}\n      >\n        {/* Instructions */}\n        {instructions && (\n          <div className=\"border-b p-4\">\n            <p className=\"text-sm text-muted-foreground\">{instructions}</p>\n          </div>\n        )}\n\n        {/* Filters */}\n        {isFiltersVisible && (\n          <div className=\"space-y-3 border-b p-4\">\n            <div className=\"flex flex-col gap-3 sm:flex-row\">\n              {shouldShowSearch && (\n                <div className=\"relative flex-1\">\n                  <Search className=\"text-muted-foreground absolute top-1/2 left-3 size-4 -translate-y-1/2 transform\" />\n                  <Input\n                    placeholder={searchPlaceholder}\n                    value={searchQuery}\n                    onChange={(e) => setSearchQuery(e.target.value)}\n                    className=\"pl-9\"\n                  />\n                </div>\n              )}\n\n              {shouldShowPostType && postTypes.length > 0 && (\n                <Select value={selectedPostType} onValueChange={setSelectedPostType}>\n                  <SelectTrigger className=\"w-full sm:w-[180px]\">\n                    <SelectValue placeholder=\"Post type\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"all\">All types</SelectItem>\n                    {postTypes.map((type) => (\n                      <SelectItem key={type} value={type}>\n                        {type}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              )}\n\n              {shouldShowPostStatus && postStatuses.length > 0 && (\n                <Select value={selectedPostStatus} onValueChange={setSelectedPostStatus}>\n                  <SelectTrigger className=\"w-full sm:w-[180px]\">\n                    <SelectValue placeholder=\"Status\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"all\">All statuses</SelectItem>\n                    {postStatuses.map((status) => (\n                      <SelectItem key={status} value={status}>\n                        {status}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              )}\n\n              {shouldShowTaxonomy && taxonomies.length > 0 && (\n                <Select value={selectedTaxonomy} onValueChange={setSelectedTaxonomy}>\n                  <SelectTrigger className=\"w-full sm:w-[180px]\">\n                    <SelectValue placeholder=\"Category\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"all\">All categories</SelectItem>\n                    {taxonomies.map((taxonomy) => (\n                      <SelectItem key={taxonomy} value={taxonomy}>\n                        {taxonomy}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              )}\n            </div>\n          </div>\n        )}\n\n        {/* Main Content */}\n        <div className=\"grid grid-cols-1 lg:grid-cols-2\">\n          {/* Available Items */}\n          <Card className=\"flex flex-col h-96 border-none rounded-none p-0\">\n            <CardContent className=\"flex-1 overflow-hidden p-0\">\n              <div className=\"h-full overflow-y-auto px-4 pt-4 pb-4\">\n                {loading ? (\n                  <div className=\"flex items-center justify-center h-32 text-sm text-muted-foreground\">\n                    {loadingText}\n                  </div>\n                ) : filteredItems.length === 0 ? (\n                  <div className=\"flex items-center justify-center h-32 text-sm text-muted-foreground\">\n                    {noItemsText}\n                  </div>\n                ) : (\n                  <div className=\"space-y-2\">\n                    {filteredItems.map((item) => {\n                      const isSelected = internalSelected.some((selected) => selected.id === item.id)\n                      \n                      return (\n                        <div\n                          key={item.id}\n                          className={cn(\n                            \"group border rounded-lg p-3 transition-colors\",\n                            isSelected\n                              ? \"bg-muted/50 border-muted cursor-default opacity-60\"\n                              : \"cursor-pointer hover:bg-accent\"\n                          )}\n                          onClick={!isSelected ? () => handleSelectItem(item) : undefined}\n                        >\n                          <div className=\"flex items-center gap-3\">\n                            {showFeaturedImage && item.featured_image && (\n                              <img\n                                src={item.featured_image}\n                                alt={item.title}\n                                className=\"w-8 h-8 rounded object-cover flex-shrink-0\"\n                              />\n                            )}\n                            <div className=\"flex-1 min-w-0\">\n                              <h4 className=\"font-medium text-sm leading-tight truncate\">\n                                {item.title}\n                              </h4>\n                              {showExcerpt && item.excerpt && (\n                                <p className=\"text-xs text-muted-foreground mt-1 line-clamp-2\">\n                                  {item.excerpt}\n                                </p>\n                              )}\n                              <div className=\"flex items-center gap-2 mt-1\">\n                                {item.type && (\n                                  <Badge variant=\"secondary\" className=\"text-xs h-5\">\n                                    {item.type}\n                                  </Badge>\n                                )}\n                                {item.status && item.status !== \"publish\" && (\n                                  <Badge variant=\"outline\" className=\"text-xs h-5\">\n                                    {item.status}\n                                  </Badge>\n                                )}\n                                {item.taxonomy?.map((tax) => (\n                                  <Badge key={tax} variant=\"outline\" className=\"text-xs h-5\">\n                                    {tax}\n                                  </Badge>\n                                ))}\n                                {showDate && item.date && (\n                                  <span className=\"text-xs text-muted-foreground\">\n                                    {item.date}\n                                  </span>\n                                )}\n                              </div>\n                            </div>\n                            <Button\n                              size=\"sm\"\n                              variant={isSelected ? \"secondary\" : \"outline\"}\n                              className=\"h-8 w-8 p-0 flex-shrink-0\"\n                              disabled={isSelected}\n                            >\n                              {isSelected ? (\n                                <X className=\"h-3 w-3\" />\n                              ) : (\n                                <Plus className=\"h-3 w-3\" />\n                              )}\n                            </Button>\n                          </div>\n                          {showPreview && item.url && (\n                            <div className=\"mt-2 pt-2 border-t\">\n                              <Button\n                                variant=\"link\"\n                                size=\"sm\"\n                                className=\"h-auto p-0 text-xs\"\n                                asChild\n                              >\n                                <a href={item.url} target=\"_blank\" rel=\"noopener noreferrer\">\n                                  <Eye className=\"h-3 w-3 mr-1\" />\n                                  Preview\n                                </a>\n                              </Button>\n                            </div>\n                          )}\n                        </div>\n                      )\n                    })}\n                  </div>\n                )}\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Selected Items */}\n          <Card className=\"flex flex-col h-96 border-none rounded-none p-0\">\n            <CardContent className=\"flex-1 overflow-hidden p-0\">\n              <div className=\"h-full overflow-y-auto px-4 pt-4 pb-4\">\n                {internalSelected.length === 0 ? (\n                  <div className=\"flex items-center justify-center h-32 text-sm text-muted-foreground\">\n                    {noSelectedText}\n                  </div>\n                ) : (\n                  <div className=\"space-y-2\">\n                    {internalSelected.map((item) => (\n                      <div\n                        key={item.id}\n                        className=\"group border rounded-lg p-3 bg-accent/50\"\n                      >\n                        <div className=\"flex items-center gap-3\">\n                          {sortable && (\n                            <Button\n                              size=\"sm\"\n                              variant=\"ghost\"\n                              className=\"h-8 w-8 p-0 cursor-grab flex-shrink-0\"\n                            >\n                              <GripVertical className=\"h-3 w-3\" />\n                            </Button>\n                          )}\n                          {showFeaturedImage && item.featured_image && (\n                            <img\n                              src={item.featured_image}\n                              alt={item.title}\n                              className=\"w-8 h-8 rounded object-cover flex-shrink-0\"\n                            />\n                          )}\n                          <div className=\"flex-1 min-w-0\">\n                            <h4 className=\"font-medium text-sm leading-tight truncate\">\n                              {item.title}\n                            </h4>\n                            {showExcerpt && item.excerpt && (\n                              <p className=\"text-xs text-muted-foreground mt-1 line-clamp-2\">\n                                {item.excerpt}\n                              </p>\n                            )}\n                            <div className=\"flex items-center gap-2 mt-1\">\n                              {item.type && (\n                                <Badge variant=\"secondary\" className=\"text-xs h-5\">\n                                  {item.type}\n                                </Badge>\n                              )}\n                              {item.status && item.status !== \"publish\" && (\n                                <Badge variant=\"outline\" className=\"text-xs h-5\">\n                                  {item.status}\n                                </Badge>\n                              )}\n                              {item.taxonomy?.map((tax) => (\n                                <Badge key={tax} variant=\"outline\" className=\"text-xs h-5\">\n                                  {tax}\n                                </Badge>\n                              ))}\n                              {showDate && item.date && (\n                                <span className=\"text-xs text-muted-foreground\">\n                                  {item.date}\n                                </span>\n                              )}\n                            </div>\n                          </div>\n                          <Button\n                            size=\"sm\"\n                            variant=\"ghost\"\n                            className=\"h-8 w-8 p-0 flex-shrink-0\"\n                            onClick={() => handleRemoveItem(item)}\n                          >\n                            <X className=\"h-3 w-3\" />\n                          </Button>\n                        </div>\n                        {showPreview && item.url && (\n                          <div className=\"mt-2 pt-2 border-t\">\n                            <Button\n                              variant=\"link\"\n                              size=\"sm\"\n                              className=\"h-auto p-0 text-xs\"\n                              asChild\n                            >\n                              <a href={item.url} target=\"_blank\" rel=\"noopener noreferrer\">\n                                <Eye className=\"h-3 w-3 mr-1\" />\n                                Preview\n                              </a>\n                            </Button>\n                          </div>\n                        )}\n                      </div>\n                    ))}\n                  </div>\n                )}\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Footer */}\n        <div className=\"bg-muted/30 text-muted-foreground border-t p-3 text-xs\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              {required && internalSelected.length < min && (\n                <span className=\"text-destructive\">\n                  Minimum {min} item{min !== 1 ? \"s\" : \"\"} required\n                </span>\n              )}\n              {min > 0 && internalSelected.length >= min && (\n                <span className=\"text-green-600\">\n                  {internalSelected.length} selected / {min} min required\n                </span>\n              )}\n            </div>\n            <div>\n              {internalSelected.length} selected{max < Infinity && ` / ${max} max`}\n            </div>\n          </div>\n        </div>\n\n        {/* Error Message */}\n        {error && (\n          <div className=\"border-destructive bg-destructive/10 border-t p-3\">\n            <p className=\"text-destructive text-sm\">{error}</p>\n          </div>\n        )}\n      </div>\n    )\n  }\n)\nRelationship.displayName = \"Relationship\"\n\nexport { Relationship, relationshipVariants }\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}