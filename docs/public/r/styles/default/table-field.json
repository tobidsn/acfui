{
  "name": "table-field",
  "type": "registry:ui",
  "dependencies": [
    "class-variance-authority",
    "lucide-react"
  ],
  "registryDependencies": [
    "button",
    "input"
  ],
  "files": [
    {
      "path": "ui/table-field.tsx",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { Plus, X } from \"lucide-react\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\n\nconst tableFieldVariants = cva(\"border rounded-lg bg-background\", {\n  variants: {\n    variant: {\n      default: \"border-border\",\n      error: \"border-destructive\",\n    },\n    size: {\n      sm: \"text-sm\",\n      md: \"text-base\",\n      lg: \"text-lg\",\n    },\n  },\n  defaultVariants: {\n    variant: \"default\",\n    size: \"md\",\n  },\n})\n\nexport interface TableFieldColumn {\n  id: string\n  label: string\n  type?: \"text\" | \"number\" | \"date\" | \"boolean\" | \"select\"\n  options?: Array<{ value: string; label: string }>\n  required?: boolean\n  defaultValue?: any\n}\n\nexport interface TableFieldRow {\n  id: string\n  data: Record<string, any>\n}\n\nexport interface TableFieldData {\n  columns: TableFieldColumn[]\n  rows: TableFieldRow[]\n}\n\nexport interface TableFieldProps {\n  value: TableFieldData\n  onChange: (data: TableFieldData) => void\n  allowAddColumn?: boolean\n  allowAddRow?: boolean\n  allowDeleteColumn?: boolean\n  allowDeleteRow?: boolean\n  defaultColumnType?: TableFieldColumn[\"type\"]\n  defaultColumnLabel?: string\n  defaultRowData?: Record<string, any>\n  minRows?: number\n  maxRows?: number\n  minColumns?: number\n  maxColumns?: number\n  error?: string\n  instructions?: string\n}\n\nfunction generateId() {\n  return Math.random().toString(36).slice(2, 10)\n}\n\nexport const TableField = React.forwardRef<HTMLDivElement, TableFieldProps>(\n  (\n    {\n      value,\n      onChange,\n      allowAddColumn = true,\n      allowAddRow = true,\n      allowDeleteColumn = true,\n      allowDeleteRow = true,\n      defaultColumnType = \"text\",\n      defaultColumnLabel = \"Column\",\n      defaultRowData = {},\n      minRows = 0,\n      maxRows = Infinity,\n      minColumns = 0,\n      maxColumns = Infinity,\n      error,\n      instructions,\n    },\n    ref\n  ) => {\n    const { columns, rows } = value\n\n    // Add column\n    function onAddColumn() {\n      if (columns.length >= maxColumns) return\n      const newId = generateId()\n      const newColumn: TableFieldColumn = {\n        id: newId,\n        label: `${defaultColumnLabel} ${columns.length + 1}`,\n        type: defaultColumnType,\n      }\n      const newColumns = [...columns, newColumn]\n      const newRows = rows.map(row => ({\n        ...row,\n        data: { ...row.data, [newId]: \"\" },\n      }))\n      onChange({ columns: newColumns, rows: newRows })\n    }\n\n    // Delete column\n    function onDeleteColumn(colId: string) {\n      if (columns.length <= minColumns) return\n      const newColumns = columns.filter(col => col.id !== colId)\n      const newRows = rows.map(row => {\n        const { [colId]: _, ...rest } = row.data\n        return { ...row, data: rest }\n      })\n      onChange({ columns: newColumns, rows: newRows })\n    }\n\n    // Add row\n    function onAddRow() {\n      if (rows.length >= maxRows) return\n      const newId = generateId()\n      const newRowData: Record<string, any> = {}\n      columns.forEach(col => {\n        newRowData[col.id] = col.defaultValue ?? \"\"\n      })\n      Object.assign(newRowData, defaultRowData)\n      onChange({ columns, rows: [...rows, { id: newId, data: newRowData }] })\n    }\n\n    // Delete row\n    function onDeleteRow(rowId: string) {\n      if (rows.length <= minRows) return\n      onChange({ columns, rows: rows.filter(row => row.id !== rowId) })\n    }\n\n    // Edit cell\n    function onEditCell(rowId: string, colId: string, value_: any) {\n      const newRows = rows.map(row =>\n        row.id === rowId ? { ...row, data: { ...row.data, [colId]: value_ } } : row\n      )\n      onChange({ columns, rows: newRows })\n    }\n\n    return (\n      <div ref={ref} className={cn(tableFieldVariants({ variant: \"default\", size: \"md\" }))}>\n        {instructions && (\n          <div className=\"border-b p-4\">\n            <p className=\"text-sm text-muted-foreground\">{instructions}</p>\n          </div>\n        )}\n        <div className=\"overflow-x-auto\">\n          <table className=\"min-w-full border-separate border-spacing-0\">\n            <thead>\n              <tr>\n                {columns.map((col, colIdx) => (\n                  <th key={col.id} className=\"relative px-4 py-2 bg-muted/30 text-left font-medium text-sm border-b\">\n                    <div className=\"flex items-center gap-2\">\n                      <Input\n                        className=\"w-32 px-2 py-1 text-sm\"\n                        value={col.label}\n                        onChange={e => {\n                          const newColumns = columns.map(c =>\n                            c.id === col.id ? { ...c, label: e.target.value } : c\n                          )\n                          onChange({ columns: newColumns, rows })\n                        }}\n                      />\n                      {allowDeleteColumn && columns.length > minColumns && (\n                        <Button\n                          size=\"icon\"\n                          variant=\"ghost\"\n                          className=\"h-6 w-6 p-0\"\n                          onClick={() => onDeleteColumn(col.id)}\n                          tabIndex={-1}\n                        >\n                          <X className=\"h-4 w-4\" />\n                        </Button>\n                      )}\n                    </div>\n                  </th>\n                ))}\n                {allowAddColumn && columns.length < maxColumns && (\n                  <th className=\"px-2 py-2 bg-muted/30\">\n                    <Button size=\"icon\" variant=\"outline\" className=\"h-6 w-6 p-0\" onClick={onAddColumn}>\n                      <Plus className=\"h-4 w-4\" />\n                    </Button>\n                  </th>\n                )}\n              </tr>\n            </thead>\n            <tbody>\n              {rows.map((row, rowIdx) => (\n                <tr key={row.id} className=\"border-b\">\n                  {columns.map(col => (\n                    <td key={col.id} className=\"px-4 py-2 align-middle\">\n                      <Input\n                        className=\"w-full px-2 py-1 text-sm\"\n                        value={row.data[col.id] ?? \"\"}\n                        onChange={e => onEditCell(row.id, col.id, e.target.value)}\n                      />\n                    </td>\n                  ))}\n                  {allowDeleteRow && rows.length > minRows && (\n                    <td className=\"px-2 py-2\">\n                      <Button size=\"icon\" variant=\"ghost\" className=\"h-6 w-6 p-0\" onClick={() => onDeleteRow(row.id)}>\n                        <X className=\"h-4 w-4\" />\n                      </Button>\n                    </td>\n                  )}\n                </tr>\n              ))}\n              {allowAddRow && rows.length < maxRows && (\n                <tr>\n                  <td colSpan={columns.length + (allowDeleteRow ? 1 : 0)} className=\"px-4 py-2 text-center\">\n                    <Button size=\"sm\" variant=\"outline\" onClick={onAddRow}>\n                      <Plus className=\"h-4 w-4 mr-1\" /> Add Row\n                    </Button>\n                  </td>\n                </tr>\n              )}\n            </tbody>\n          </table>\n        </div>\n        {error && (\n          <div className=\"border-destructive bg-destructive/10 border-t p-3\">\n            <p className=\"text-destructive text-sm\">{error}</p>\n          </div>\n        )}\n      </div>\n    )\n  }\n)\nTableField.displayName = \"TableField\" ",
      "type": "registry:ui",
      "target": ""
    }
  ]
}