{
  "name": "table-field",
  "type": "registry:ui",
  "dependencies": [
    "class-variance-authority",
    "lucide-react"
  ],
  "registryDependencies": [
    "button",
    "input"
  ],
  "files": [
    {
      "path": "ui/table-field.tsx",
      "content": "\"use client\";\n\nimport { useState, useEffect } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport { Plus, Trash2 } from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\n\nexport interface TableFieldColumn {\n  name: string;\n  label: string;\n  type?: \"text\" | \"textarea\";\n  placeholder?: string;\n  is_required?: boolean;\n}\n\nexport interface TableFieldProps {\n  name: string;\n  label: string;\n  value?: string;\n  required?: boolean;\n  caption?: string;\n  columns?: TableFieldColumn[];\n  min?: number;\n  max?: number;\n  setValue: (name: string, value: string) => void;\n  errors?: Record<string, string>;\n  itemIndex?: number;\n  languages?: Array<{ code: string; name: string }>;\n  selectedIndex?: number;\n  setSelectedIndex?: (index: number) => void;\n  data?: any;\n}\n\ninterface TableRow {\n  id: string;\n  [key: string]: any;\n}\n\nexport default function TableField({\n  name,\n  label,\n  value = \"[]\",\n  required = false,\n  caption = \"Add rows to the table\",\n  columns = [],\n  min = 0,\n  max = Infinity,\n  setValue,\n  errors,\n  itemIndex,\n  languages,\n  selectedIndex,\n  setSelectedIndex,\n  data,\n}: TableFieldProps) {\n  // Parse the initial value or use an empty array with default values\n  const [rows, setRows] = useState<TableRow[]>(() => {\n    try {\n      const initialValue =\n        languages && selectedIndex !== undefined && languages[selectedIndex]\n          ? data?.translations?.[languages[selectedIndex].code]?.[name] || \"[]\"\n          : data?.[name] || \"[]\";\n\n      let parsedValue = JSON.parse(initialValue);\n      if (!Array.isArray(parsedValue)) {\n        parsedValue = [];\n      }\n      // Ensure each row has all required fields\n      return parsedValue.map((row: any) => {\n        const newRow: TableRow = { id: crypto.randomUUID() };\n        columns.forEach((column) => {\n          newRow[column.name] = row[column.name] || \"\";\n        });\n        return newRow;\n      });\n    } catch (e) {\n      return [];\n    }\n  });\n\n  // Generate a unique ID for a new row with default values\n  const createEmptyRow = (): TableRow => {\n    const newRow: TableRow = { id: crypto.randomUUID() };\n    columns.forEach((column) => {\n      newRow[column.name] = \"\";\n    });\n    return newRow;\n  };\n\n  // Add initial rows if needed to meet minimum requirement\n  useEffect(() => {\n    if (rows.length < min) {\n      const newRows = [...rows];\n      for (let i = rows.length; i < min; i++) {\n        newRows.push(createEmptyRow());\n      }\n      setRows(newRows);\n    }\n  }, [min]);\n\n  // Update rows based on value from data for multilingual support\n  useEffect(() => {\n    if (\n      languages &&\n      data &&\n      selectedIndex !== undefined &&\n      languages[selectedIndex]\n    ) {\n      const langValue =\n        data?.translations?.[languages[selectedIndex].code]?.[name] || \"[]\";\n      try {\n        let parsedValue = JSON.parse(langValue);\n        if (!Array.isArray(parsedValue)) {\n          parsedValue = [];\n        }\n        // Ensure each row has all required fields\n        const updatedRows = parsedValue.map((row: any) => {\n          const newRow: TableRow = { id: crypto.randomUUID() };\n          columns.forEach((column) => {\n            newRow[column.name] = row[column.name] || \"\";\n          });\n          return newRow;\n        });\n        setRows(updatedRows);\n      } catch (e) {\n        setRows([]);\n      }\n    }\n  }, [data, languages, selectedIndex, name, columns]);\n\n  // Update the parent component with the JSON string value whenever rows change\n  useEffect(() => {\n    // Only include non-empty rows in the output\n    const rowsToSave = rows\n      .filter((row) => columns.some((column) => row[column.name]?.trim()))\n      .map((row) => {\n        const { id, ...rowData } = row;\n        return rowData;\n      });\n    setValue(name, JSON.stringify(rowsToSave));\n  }, [rows, name, setValue, columns]);\n\n  // Add a new row to the table\n  const handleAddRow = () => {\n    if (rows.length < max) {\n      setRows([...rows, createEmptyRow()]);\n    }\n  };\n\n  // Remove a row from the table\n  const handleRemoveRow = (index: number) => {\n    if (rows.length > min) {\n      const newRows = [...rows];\n      newRows.splice(index, 1);\n      setRows(newRows);\n    }\n  };\n\n  // Update a cell value\n  const handleCellChange = (\n    rowIndex: number,\n    columnName: string,\n    value: string,\n  ) => {\n    const newRows = [...rows];\n    const currentRow = newRows[rowIndex];\n    newRows[rowIndex] = {\n      ...currentRow,\n      [columnName]: value,\n    } as TableRow;\n    setRows(newRows);\n  };\n\n  const renderTable = (langCode: string | null = null) => {\n    return (\n      <div className=\"w-full space-y-4\">\n        <div className=\"border rounded-md\">\n          <Table>\n            <TableHeader>\n              <TableRow>\n                {columns.map((column) => (\n                  <TableHead key={column.name} className=\"font-medium\">\n                    {column.label}\n                    {column.is_required && (\n                      <span className=\"text-destructive ml-1\">*</span>\n                    )}\n                  </TableHead>\n                ))}\n                <TableHead className=\"w-[80px]\">Actions</TableHead>\n              </TableRow>\n            </TableHeader>\n            <TableBody>\n              {rows.map((row, rowIndex) => (\n                <TableRow key={row.id}>\n                  {columns.map((column) => (\n                    <TableCell key={`${row.id}-${column.name}`}>\n                      {column.type === \"textarea\" ? (\n                        <Textarea\n                          value={row[column.name] || \"\"}\n                          onChange={(e) =>\n                            handleCellChange(\n                              rowIndex,\n                              column.name,\n                              e.target.value,\n                            )\n                          }\n                          placeholder={column.placeholder || \"\"}\n                          className={cn(\n                            \"min-h-[30px] resize-y\",\n                            errors?.[`${name}.${rowIndex}.${column.name}`] &&\n                              \"border-destructive\",\n                          )}\n                        />\n                      ) : (\n                        <Input\n                          value={row[column.name] || \"\"}\n                          onChange={(e) =>\n                            handleCellChange(\n                              rowIndex,\n                              column.name,\n                              e.target.value,\n                            )\n                          }\n                          placeholder={column.placeholder || \"\"}\n                          className={cn(\n                            errors?.[`${name}.${rowIndex}.${column.name}`] &&\n                              \"border-destructive\",\n                          )}\n                        />\n                      )}\n                    </TableCell>\n                  ))}\n                  <TableCell>\n                    <Button\n                      variant=\"ghost\"\n                      size=\"icon\"\n                      onClick={() => handleRemoveRow(rowIndex)}\n                      disabled={rows.length <= min}\n                      className=\"h-8 w-8\"\n                    >\n                      <Trash2 className=\"h-4 w-4\" />\n                    </Button>\n                  </TableCell>\n                </TableRow>\n              ))}\n              {rows.length === 0 && (\n                <TableRow>\n                  <TableCell\n                    colSpan={columns.length + 1}\n                    className=\"text-center h-24 text-muted-foreground\"\n                  >\n                    No rows added yet\n                  </TableCell>\n                </TableRow>\n              )}\n            </TableBody>\n          </Table>\n        </div>\n\n        <div className=\"flex justify-between items-center\">\n          <Button\n            type=\"button\"\n            variant=\"outline\"\n            size=\"sm\"\n            onClick={handleAddRow}\n            disabled={rows.length >= max}\n            className=\"flex items-center gap-1\"\n          >\n            <Plus className=\"h-4 w-4\" /> Add Row\n          </Button>\n          {max < Infinity && (\n            <p className=\"text-xs text-muted-foreground\">\n              {rows.length} of {max} rows\n            </p>\n          )}\n        </div>\n      </div>\n    );\n  };\n\n  return (\n    <div className=\"space-y-2\">\n      <label className=\"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\">\n        {label}\n        {required && <span className=\"text-destructive ml-1\">*</span>}\n      </label>\n      {caption && <p className=\"text-sm text-muted-foreground\">{caption}</p>}\n      {languages ? (\n        <div>\n          {/* Language tabs would go here - simplified for now */}\n          {renderTable()}\n        </div>\n      ) : (\n        renderTable()\n      )}\n    </div>\n  );\n}\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}