{
  "name": "relationship-single-demo",
  "type": "registry:example",
  "dependencies": [
    "lucide-react"
  ],
  "registryDependencies": [
    "relationship",
    "badge",
    "button",
    "input",
    "select",
    "card"
  ],
  "files": [
    {
      "path": "examples/relationship-single-demo.tsx",
      "content": "\"use client\"\n\nimport { useState } from \"react\"\nimport { Relationship, type RelationshipItem } from \"@/registry/default/ui/relationship\"\nimport { Button } from \"@/components/ui/button\"\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\"\n\nconst parentPages: RelationshipItem[] = [\n  {\n    id: 1,\n    title: \"Documentation\",\n    type: \"page\",\n    status: \"publish\",\n    taxonomy: [\"Navigation\"],\n    excerpt: \"Main documentation section containing all guides and tutorials\",\n    date: \"2024-01-01\",\n    url: \"/docs\",\n  },\n  {\n    id: 2,\n    title: \"Blog\",\n    type: \"page\",\n    status: \"publish\",\n    taxonomy: [\"Content\"],\n    excerpt: \"Blog section with articles and updates\",\n    date: \"2024-01-01\",\n    url: \"/blog\",\n  },\n  {\n    id: 3,\n    title: \"Products\",\n    type: \"page\",\n    status: \"publish\",\n    taxonomy: [\"Commerce\"],\n    excerpt: \"Product catalog and information\",\n    date: \"2024-01-01\",\n    url: \"/products\",\n  },\n  {\n    id: 4,\n    title: \"About\",\n    type: \"page\",\n    status: \"publish\",\n    taxonomy: [\"Company\"],\n    excerpt: \"Company information and team details\",\n    date: \"2024-01-01\",\n    url: \"/about\",\n  },\n  {\n    id: 5,\n    title: \"Contact\",\n    type: \"page\",\n    status: \"publish\",\n    taxonomy: [\"Support\"],\n    excerpt: \"Contact information and support channels\",\n    date: \"2024-01-01\",\n    url: \"/contact\",\n  },\n  {\n    id: 6,\n    title: \"Legal\",\n    type: \"page\",\n    status: \"draft\",\n    taxonomy: [\"Legal\"],\n    excerpt: \"Legal documents and privacy policy\",\n    date: \"2024-01-01\",\n    url: \"/legal\",\n  },\n]\n\nexport default function RelationshipSingleDemo() {\n  const [selectedParent, setSelectedParent] = useState<RelationshipItem[]>([])\n  const [error, setError] = useState<string>(\"\")\n  const [submitted, setSubmitted] = useState(false)\n\n  const handleSubmit = () => {\n    setSubmitted(true)\n    if (selectedParent.length === 0) {\n      setError(\"Please select a parent page\")\n      return\n    }\n    setError(\"\")\n    const firstParent = selectedParent[0]\n    if (firstParent) {\n      alert(`Form submitted with parent page: ${firstParent.title}`)\n    }\n  }\n\n  const handleChange = (items: RelationshipItem[] | string[] | number[]) => {\n    // Since we're using returnFormat=\"object\" (default), items will be RelationshipItem[]\n    const relationshipItems = items as RelationshipItem[]\n    setSelectedParent(relationshipItems)\n    if (submitted && relationshipItems.length > 0) {\n      setError(\"\")\n    }\n  }\n\n  const selectedPage = selectedParent.length > 0 ? selectedParent[0] : null\n\n  return (\n    <div className=\"w-full max-w-4xl mx-auto space-y-6\">\n      <Card>\n        <CardHeader>\n          <CardTitle>Page Settings</CardTitle>\n          <CardDescription>\n            Configure the parent page for this content\n          </CardDescription>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div>\n            <label className=\"text-sm font-medium mb-2 block\">\n              Parent Page <span className=\"text-destructive\">*</span>\n            </label>\n            <Relationship\n              items={parentPages}\n              selectedItems={selectedParent}\n              onChange={handleChange}\n              multiple={false}\n              max={1}\n              required={true}\n              postTypes={[\"page\"]}\n              taxonomies={[\"Navigation\", \"Content\", \"Commerce\", \"Company\", \"Support\", \"Legal\"]}\n              showFilters={[\"search\", \"taxonomy\"]}\n              showExcerpt={true}\n              instructions=\"Select the parent page where this content should be nested\"\n              searchPlaceholder=\"Search parent pages...\"\n              noItemsText=\"No parent pages found\"\n              noSelectedText=\"No parent page selected\"\n              error={error}\n              variant={error ? \"error\" : \"default\"}\n            />\n          </div>\n\n          <div className=\"flex gap-2\">\n            <Button onClick={handleSubmit}>\n              Save Settings\n            </Button>\n            <Button \n              variant=\"outline\" \n              onClick={() => {\n                setSelectedParent([])\n                setError(\"\")\n                setSubmitted(false)\n              }}\n            >\n              Reset\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n\n      {selectedPage && (\n        <Card>\n          <CardHeader>\n            <CardTitle>Selected Parent Page</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"flex items-center gap-4 p-4 bg-muted/30 rounded-lg\">\n              <div className=\"flex-1\">\n                <h4 className=\"font-medium\">{selectedPage.title}</h4>\n                <p className=\"text-sm text-muted-foreground mt-1\">\n                  {selectedPage.excerpt}\n                </p>\n                <div className=\"flex items-center gap-2 mt-2\">\n                  <span className=\"text-xs bg-primary/10 text-primary px-2 py-1 rounded\">\n                    {selectedPage.type}\n                  </span>\n                  <span className=\"text-xs text-muted-foreground\">\n                    {selectedPage.url}\n                  </span>\n                </div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      )}\n    </div>\n  )\n} ",
      "type": "registry:example",
      "target": ""
    }
  ]
}